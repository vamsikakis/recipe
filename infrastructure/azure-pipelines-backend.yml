trigger:
  branches:
    include:
    - main
  paths:
    include:
    - backend/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  python.version: '3.9'
  appServiceName: 'yippee-backend-api'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build Backend'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        addToPath: true

    - script: |
        python -m pip install --upgrade pip
      displayName: 'Upgrade pip'

    - script: |
        pip install -r backend/requirements.txt
      displayName: 'Install dependencies'

    - script: |
        pip install pytest pytest-cov flake8
      displayName: 'Install test dependencies'

    - script: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      displayName: 'Run linting'

    - script: |
        cd backend
        pytest --cov=. --cov-report=xml
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'backend/test-results.xml'
        mergeTestResults: true
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: 'backend/coverage.xml'
      condition: succeededOrFailed()

    - script: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Prepare deployment package'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'backend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to App Service'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Your-Azure-Subscription'
              appName: '$(appServiceName)'
              package: '$(Pipeline.Workspace)/drop/backend.zip'
              appType: 'webAppLinux'
              runtimeStack: 'PYTHON|3.9'
              startUpCommand: 'gunicorn --bind=0.0.0.0 --timeout 600 main:app'

          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: 'Your-Azure-Subscription'
              appName: '$(appServiceName)'
              appSettings: |
                -COSMOS_DB_CONNECTION_STRING "$(COSMOS_DB_CONNECTION_STRING)"
                -COSMOS_DB_NAME "yippee-recipes"
                -AZURE_LANGUAGE_ENDPOINT "$(AZURE_LANGUAGE_ENDPOINT)"
                -AZURE_LANGUAGE_KEY "$(AZURE_LANGUAGE_KEY)"
                -AZURE_OPENAI_ENDPOINT "$(AZURE_OPENAI_ENDPOINT)"
                -AZURE_OPENAI_KEY "$(AZURE_OPENAI_KEY)"
                -AZURE_OPENAI_DEPLOYMENT_NAME "$(AZURE_OPENAI_DEPLOYMENT_NAME)"
                -AZURE_OPENAI_DALLE_DEPLOYMENT_NAME "$(AZURE_OPENAI_DALLE_DEPLOYMENT_NAME)"
                -APPLICATIONINSIGHTS_CONNECTION_STRING "$(APPLICATIONINSIGHTS_CONNECTION_STRING)"
                -WEBSITES_PORT "8000" 